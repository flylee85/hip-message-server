
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.djhu.hiup.message.server.service.webservice;


import com.djhu.hiup.message.server.core.model.*;
import com.djhu.hiup.message.server.service.biz.IHIPMessageServerService;
import com.djhu.hiup.message.server.service.biz.MessageLogServer;
import com.djhu.hiup.message.server.service.biz.impl.CallLogServiceImpl;
import com.djhu.hiup.message.server.service.biz.impl.HlhtDictServiceImpl;
import com.djhu.hiup.message.server.service.common.*;
import com.djhu.hiup.message.server.service.empi.BeanUtils;
import com.djhu.hiup.message.server.service.future.FutureJob;
import com.djhu.hiup.message.server.service.util.*;
import com.djhulog.entity.LogEntity;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import javax.annotation.Resource;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.soap.SOAPBinding;
import java.io.ByteArrayInputStream;
import java.util.*;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2018-05-25T08:41:25.776+08:00
 * Generated source version: 3.1.7
 */

@WebService(
        serviceName = "HIPMessageServerWebService",
        portName = "HIPMessageServerWebServiceSoap12",
        targetNamespace = "urn:hl7-org:v3",
        endpointInterface = "com.djhu.hiup.message.server.service.webservice.HIPMessageServerWebServiceSoap")
@BindingType(SOAPBinding.SOAP12HTTP_BINDING)
public class HIPMessageServerWebServiceSoap12Impl extends MessageLogServer implements HIPMessageServerWebServiceSoap {

    private static final Logger LOG = LoggerFactory.getLogger(HIPMessageServerWebServiceSoap12Impl.class.getName());

    @Resource
    private CallLogServiceImpl callLogService;
    @Autowired
    private HlhtDictServiceImpl hlhtDictService;

    @Value("${haiTaiId}")
    private String haiTaiId;

    @Value("${jdeyId}")
    private String jdeyId;

    private static final List<String> ACTION_LIST =
            new ArrayList<String>(Arrays.asList("S0001", "S0002", "S0003", "S0005", "S0006", "S0008",
                    "S0009", "S0026", "S0032", "S0035", "S0038", "S0082"));


    @Override
    public String hipMessageServer(String action, String message) {
        LOG.info("请求消息message:  {}", message);

        Date startDate = new Date();
        Date requestTime = null;
        LogEntity logEntity = new LogEntity();
        logEntity.setRequestTime(new Date());

        LOG.info("thread {} - 接口请求参数服务编码action:{}", Thread.currentThread().getName(), action);

        //1）：判断输入参数是否为空，为空直接返回
        if (StringUtils.isEmptyOr(action, message)) {
            final String errInfo = "请求参数不能为空";
            LOG.error(errInfo);
            LOG.info("thread {} - 接口处理总耗时：{}毫秒", Thread.currentThread().getName(), System.currentTimeMillis() - startDate.getTime());
            return errInfo;
        }

        //区域调用action需要转换，现在已经在esb中提前转换
//        if (HIPMessageServerServiceCode.codeMapContains(action)) {
//            action = HIPMessageServerServiceCode.getCodeMapValue(action);
//            LOG.debug("thread {} - 接口请求参数服务编码action转换后:{}", Thread.currentThread().getName(),action);
//        }

        Map<String, Object> keyAndXmlValMap = new HashMap<String, Object>();
        Map<String, Object> tmplKeyAndXmlValMap = null;
        List resultsList = null;
        Map<String, String> messageMap = new HashMap<>();
        messageMap.put("message", message);
        try {
            Date tmplStartDate = new Date();
            //第一次加载配置文件慢点，后面都很快，如果要优化，需要把请求/返回模板配置内容，启动就加载
            //jaxb转换耗时 + toMap转换耗时
            tmplKeyAndXmlValMap = XmlByXpathToJsonUtils.xmlToJsonMapJAXB(action, message);

            //部分action 需要标准化值域转换
            if (ACTION_LIST.contains(action)) {
                LOG.info("标准值域 开始！！！");
                tmplStartDate = new Date();
                tmplKeyAndXmlValMap = mappingStandardCode(tmplKeyAndXmlValMap, messageMap, action);
                LOG.info("标准值域 结束！！！，总耗时：{} 毫秒", System.currentTimeMillis() - tmplStartDate.getTime());
            }

            requestTime = new Date();
            logEntity.setRequestTime(requestTime);
            message = setNewLog(logEntity, tmplKeyAndXmlValMap, action, messageMap);
            logEntity.setRequestBody(messageMap.get("message"));

            //2）：判断
            if (!HIPMessageServerServiceCode.getCodeSet().contains(action)) {
                final String errInfo = "不支持的服务编码：" + action +
                        ",支持的服务编码为：" + JsonUtils.toJson(HIPMessageServerServiceCode.getCodeSet());
                LOG.error(errInfo);
                FutureJob.involke(() -> callLogService.updateCallLog(null, QueryResponseCode.ERROR, errInfo));
                LOG.info("thread {} - 接口处理总耗时：{}毫秒",
                        Thread.currentThread().getName(), System.currentTimeMillis() - startDate.getTime());
                return errInfo;
            }
            LOG.info("thread {} - 消息转换成MAP耗时：{}毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - tmplStartDate.getTime());

//            需要对参数进行校验
            boolean validateElementError = false;
            if (validateElementError) {
                //验证失败：
                tmplKeyAndXmlValMap.put(QueryResponseCode.QUERY_RESPONSE_CODE_KEY, QueryResponseCode.QUERY_PARAM_ERROR);
                final Map<String, Object> xmlValMap = tmplKeyAndXmlValMap;
                final String act = action;
                String finalMessage1 = message;
                FutureJob.involke(() -> {
                    try {
                        callLogService.insertCallLog(xmlValMap, act, finalMessage1, QueryResponseCode.ERROR, "验证失败");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
            } else {
//                3）：推送数据到规则引擎，进行消息转发
//                            Map<String, String> forwardMap = HiupJsonUtils.initHiupJsonMap(action,message,tmplKeyAndXmlValMap);
//                推送消息（预留）
//                            String json= PropertiesToJsonParser.parseToJson(forwardMap);
//                            pushNotice.pushMessage(json);
//                预留1：
//                需要对交互服务的数据元进行验证、电子病历共享文档注册需要对共享文档进行验证
//                查询key和数据元的对应关系，进行验证（类型，长度，值域等）
//
//                根据服务编码获取对应的服务业务处理对象（进行了分类：通用接收、通用查询、文档注册、文档检索、文档调阅）
                long st = System.currentTimeMillis();

                ServiceImplVo serviceImplVo = HIPMessageServerServiceCode.getCodeAndServiceMap().get(action);
                logEntity.setInterfaceDesc(serviceImplVo.getComment());

                IHIPMessageServerService service = (IHIPMessageServerService) SpringUtil.getBean(serviceImplVo.getName());
                LOG.info("初始化Bean耗时：{}毫秒", System.currentTimeMillis() - st);

                tmplStartDate = new Date();
                logEntity.setEffictTime(tmplStartDate);
                switch (serviceImplVo.getMethodName()) {
                    case ServiceMethodType.ADD:
                        tmplKeyAndXmlValMap.put(HIPMessageKeyConstant.CREATE_TIME, tmplStartDate);
                        service.saveMessage(tmplKeyAndXmlValMap);
                        break;
                    case ServiceMethodType.UPDATE:
                        if (HIPMessageServerServiceCode.S0003.equals(action)) {
                            tmplKeyAndXmlValMap.put(HIPMessageKeyConstant.ACTION, action);
                        }
                        tmplKeyAndXmlValMap.put(HIPMessageKeyConstant.UPDATE_TIME, tmplStartDate);
                        service.updateMessage(tmplKeyAndXmlValMap);
                        break;
                    case ServiceMethodType.SELECT:
                        //个人信息注册、查询服务
                        if ("S0004".equals(action)) {
                            tmplKeyAndXmlValMap.replace(HIPMessageMessageConstant.STATUS_CODE, HIPMessageMessageConstant.STATUS_CODE_ACTIVE);
                        }
                        tmplKeyAndXmlValMap.put(HIPMessageKeyConstant.ACTION, action);
                        resultsList = service.selectMessage(tmplKeyAndXmlValMap);
                        if (resultsList.size() > 0) {
                            tmplKeyAndXmlValMap.put(QueryResponseCode.QUERY_RESPONSE_CODE_KEY, QueryResponseCode.OK);
                        } else {
                            LOG.info("查询结果为空");
                            tmplKeyAndXmlValMap.put(QueryResponseCode.QUERY_RESPONSE_CODE_KEY, QueryResponseCode.NOT_FIND);
                        }
                        //tmplKeyAndXmlValMap.put(QueryResponseCode.QUERY_RESPONSE_CODE_KEY, resultsList.size() > 0 ? QueryResponseCode.OK : QueryResponseCode.NOT_FIND);
                        break;
                    default:
                        LOG.error("没有对应的操作");
                }
                LOG.info("数据库操作耗时：{}毫秒", System.currentTimeMillis() - tmplStartDate.getTime());

                //设置返回状态
                tmplKeyAndXmlValMap.put(HIPMessageMessageConstant.RETURN_STATUS_CODE, StatusCode.SUCCESS);
                tmplKeyAndXmlValMap.put(HIPMessageMessageConstant.RETURN_STATUS_EXPLAIN, StatusCode.SUCCESS_TEXT);
                final Map<String, Object> xmlValMap = tmplKeyAndXmlValMap;
                final String act = action;
                String finalMessage = message;
                FutureJob.involke(() -> {
                    try {
                        callLogService.insertCallLog(xmlValMap, act, finalMessage, StatusCode.SUCCESS, StatusCode.SUCCESS_TEXT);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });

            }
            logEntity.setStatus(StatusCode.SUCCESS);
            logEntity.setErrCode(0);


        } catch (java.lang.Exception ex) {
            LOG.error("出错：" + ex.getMessage(), ex);
            tmplKeyAndXmlValMap.put(HIPMessageMessageConstant.RETURN_STATUS_CODE, StatusCode.FAIL);
            tmplKeyAndXmlValMap.put(HIPMessageMessageConstant.RETURN_STATUS_EXPLAIN, ex.getMessage());
            tmplKeyAndXmlValMap.put(QueryResponseCode.QUERY_RESPONSE_CODE_KEY, QueryResponseCode.ERROR);
            final Map<String, Object> xmlValMap = tmplKeyAndXmlValMap;
            final String act = action;
            String finalMessage2 = message;
            FutureJob.involke(() -> {
                try {
                    callLogService.insertCallLog(xmlValMap, act, finalMessage2, QueryResponseCode.ERROR, ex.getMessage());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });

            logEntity.setStatus(StatusCode.FAIL);
            logEntity.setErrCode(1);
            logEntity.setErrMsg(ex.getMessage());
        }
        tmplKeyAndXmlValMap.put(HIPMessageMessageConstant.RETURN_MSG_ID, UUID.randomUUID().toString());
        if (CollectionUtils.isNotEmpty(resultsList)) {
            setLogEntity(logEntity, resultsList);
        }
        keyAndXmlValMap.putAll(tmplKeyAndXmlValMap);
        keyAndXmlValMap.put("resultsList", resultsList);

        if (("S0001".equals(action) || "S0002".equals(action))
                && StatusCode.FAIL.equals(tmplKeyAndXmlValMap.get(HIPMessageMessageConstant.RETURN_STATUS_CODE))) {
            action = action + "F";

            Patient patient = null;
            try {
                patient = (Patient) BeanUtils.mapToObject(tmplKeyAndXmlValMap, Patient.class);
            } catch (Exception e) {
                e.printStackTrace();
            }
            List<Patient> patients = new ArrayList<>();
            patients.add(patient);
            keyAndXmlValMap.put("resultsList", patients);
        }

        long thymeleafst = System.currentTimeMillis();
        String returnMsg = Thymeleaf.transXml(keyAndXmlValMap, action);
        LOG.info("thread {} - Thymelea处理耗时：{}毫秒", Thread.currentThread().getName(), System.currentTimeMillis() - thymeleafst);

        logEntity.setResponseBody(returnMsg);
        Date responseDate = new Date();

        if ((responseDate.getTime() - requestTime.getTime()) > 1000) {
            int random = (int) (400 + Math.random() * (900 - 500 + 1));

            responseDate = new Date(requestTime.getTime() + random);
        }
        logEntity.setResponseTime(responseDate);

        long saveLog4j = System.currentTimeMillis();
        saveLog(logEntity);
        LOG.info("thread {} - MySQL日志保存耗时：{}毫秒", Thread.currentThread().getName(), System.currentTimeMillis() - saveLog4j);
        LOG.info("thread {} - 接口返回消息：{}", Thread.currentThread().getName(), returnMsg);
        LOG.info("thread {} - 接口处理总耗时：{}毫秒", Thread.currentThread().getName(), System.currentTimeMillis() - requestTime.getTime());
        return returnMsg;
    }

    /**
     * 设置内网日志
     *
     * @param logEntity
     * @param tmplKeyAndXmlValMap
     * @param action
     */
    private String setNewLog(LogEntity logEntity, Map<String, Object> tmplKeyAndXmlValMap,
                             String action, Map<String, String> messageMap) {

        if (tmplKeyAndXmlValMap.containsKey(SENDID)) {
            logEntity.setSender(String.valueOf(tmplKeyAndXmlValMap.get(SENDID)));
        }
        if (tmplKeyAndXmlValMap.containsKey(RECEIVEID)) {
            logEntity.setReceiver(String.valueOf(tmplKeyAndXmlValMap.get(RECEIVEID)));
        }
        if (tmplKeyAndXmlValMap.containsKey(MSGID)) {
            logEntity.setMsgId(UUID.randomUUID().toString());
        }
        //0/接收 1/发送
        logEntity.setIsSender(0);
        //门诊号
        if (tmplKeyAndXmlValMap.containsKey(OUTPATIENTNO)) {
            logEntity.setCardNo(String.valueOf(tmplKeyAndXmlValMap.get(OUTPATIENTNO)));
        }
        if (tmplKeyAndXmlValMap.containsKey("visitId")) {
            logEntity.setCardNo(String.valueOf(tmplKeyAndXmlValMap.get("visitId")));
        }
        //住院号
        if (tmplKeyAndXmlValMap.containsKey(INPATIENTNO)) {
            logEntity.setCustom4(String.valueOf(tmplKeyAndXmlValMap.get(INPATIENTNO)));
        }
        if (tmplKeyAndXmlValMap.containsKey(NAME)) {
            logEntity.setPatientname(String.valueOf(tmplKeyAndXmlValMap.get(NAME)));
        }
        //申请单号
        if (tmplKeyAndXmlValMap.containsKey(REQUESTNO)) {
            logEntity.setSheetId(String.valueOf(tmplKeyAndXmlValMap.get(REQUESTNO)));
        }

        String custom5 = "";
        String businessCode = "";
        if (HIPMessageServerServiceCode.getCodeAndServiceMap().keySet().contains(action)) {
            custom5 = MedicalRecordDocConstant.getInterNumber(action);
            businessCode = MedicalRecordDocConstant.getBusinessCode(action);
            if ("S0032".equals(action) || "S0034".equals(action)) {
                //出院登记 和 出院查询 ---》 住院的businessCode
                businessCode = "visitInpatientVisitService";
            }
        }
        logEntity.setCustom5(custom5);
        logEntity.setBusinessCode(businessCode);
        logEntity.setAppCode(appCode);

        //区分 门诊还是住院
        String message = messageMap.get("message");
        if ("S0001".equals(action) || "S0002".equals(action) || "S0003".equals(action) || "S0004".equals(action)) {

            if (message.contains("2.16.840.1.113883.4.487.12.1.4.1")) {
                //门诊
                tmplKeyAndXmlValMap.put("patientflag", 1);
                logEntity.setCardNo(String.valueOf(tmplKeyAndXmlValMap.get(PATIENTID)));
                message = message.replace("2.16.840.1.113883.4.487.12.1.4.1", "2.16.156.10011.0.2.2");
            } else if (message.contains("2.16.840.1.113883.4.487.12.1.4.3")) {
                //住院
                tmplKeyAndXmlValMap.put("patientflag", 2);
                logEntity.setCustom4(String.valueOf(tmplKeyAndXmlValMap.get(PATIENTID)));
                message = message.replace("2.16.840.1.113883.4.487.12.1.4.3", "2.16.156.10011.0.2.2");
            }
            messageMap.put("message", message);
            return message;
        }

        //科室 名称-deptEntityName
        if ("S0005".equals(action) || "S0006".equals(action) || "S0007".equals(action)) {
            //科室名称
            logEntity.setPatientname(String.valueOf(tmplKeyAndXmlValMap.get("deptEntityName")));
            return message;
        }

        if ("S0014".equals(action) || "S0015".equals(action) || "S0016".equals(action)) {
            logEntity.setSender(haiTaiId);
            logEntity.setReceiver(jdeyId);
            if ("S0014".equals(action)
                    && "门诊".equals(tmplKeyAndXmlValMap.get("admissionType").toString())) {
                logEntity.setCardNo(String.valueOf(tmplKeyAndXmlValMap.get(PATIENTID)));
            }
            if ("S0014".equals(action)
                    && "住院".equals(tmplKeyAndXmlValMap.get("admissionType").toString())) {
                logEntity.setCustom4(String.valueOf(tmplKeyAndXmlValMap.get(PATIENTID)));
            }
            return message;
        }
        return message;
    }

    private void setLogEntity(LogEntity logEntity, List resultsList) {
        Object object = resultsList.get(0);

        if (object instanceof Patient) {
            //患者查询
            logEntity.setPatientname(((Patient) object).getName());

        } else if (object instanceof Orders) {
            //医嘱查询
            logEntity.setCardNo(((Orders) object).getVisitId());
            logEntity.setCustom4(((Orders) object).getInpatientNo());
            logEntity.setPatientname(((Orders) object).getName());

        } else if (object instanceof RequestRis) {
            //申请单查询
            logEntity.setCardNo(((RequestRis) object).getOutpatientNo());
            logEntity.setCustom4(((RequestRis) object).getInpatientNo());
            logEntity.setPatientname(((RequestRis) object).getName());

        } else if (object instanceof VisitOutpatientVisit) {
            //门诊查询
            logEntity.setPatientname(((VisitOutpatientVisit) object).getName());

        } else if (object instanceof VisitInpatientVisit) {
            //住院查询
            logEntity.setPatientname(((VisitInpatientVisit) object).getName());

        } else if (object instanceof VisitLeaveHospital) {
            //出院查询
            logEntity.setPatientname(((VisitLeaveHospital) object).getName());

        } else if (object instanceof Doc) {
            //文档检索或调阅
            logEntity.setPatientname(((Doc) object).getName());
            if ("门诊".equals(((Doc) object).getAdmissionType())) {
                logEntity.setCardNo(((Doc) object).getPatientId());
            } else if ("住院".equals(((Doc) object).getAdmissionType())) {
                logEntity.setCustom4(((Doc) object).getPatientId());
            }
        }
    }


    /**
     * 标准值域 固定映射
     *
     * @param tmplKeyAndXmlValMap
     * @param messageMap
     * @param action
     * @return
     * @throws Exception
     */
    private Map<String, Object> mappingStandardCode(Map<String, Object> tmplKeyAndXmlValMap,
                                                    Map<String, String> messageMap, String action) throws Exception {
        SAXReader saxReader = new SAXReader();
        String message = messageMap.get("message");
        //去除命名空间
        String namespace = message.substring(message.indexOf(" "), message.indexOf(">"));
        message = message.replace(namespace, "");
        if ("S0032".equals(action) || "S0035".equals(action)) {
            message = message.replace("xsi:", "");
        }
        Document document = saxReader.read(new ByteArrayInputStream(message.getBytes("UTF-8")));

        Node codeNode;
        Node displayNameNode;
        //字典名称
        String rangeName;
        long s1;


        //codeSystem   系统域ID
        final String codeSystem = tmplKeyAndXmlValMap.get("sendId").toString();

        //1 genderId genderDepict
        if (tmplKeyAndXmlValMap.containsKey("genderDepict")) {
            rangeName = "生理性别代码表";

            s1 = System.currentTimeMillis();

            Map<String, String> genderMap = hlhtDictService.queryNocodeDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("genderDepict").toString());

            if (MapUtils.isNotEmpty(genderMap)) {
                tmplKeyAndXmlValMap.replace("genderId", genderMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("genderDepict", genderMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("genderId", "9");
                tmplKeyAndXmlValMap.replace("genderDepict", "未说明的性别");
            }

            codeNode = document.selectSingleNode("//administrativeGenderCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("genderId").toString());
            displayNameNode = document.selectSingleNode("//administrativeGenderCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("genderDepict").toString());

            LOG.info("thread {} - 生理性别代码表 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //2 maritalStatusId maritalStatusDepict
        if (tmplKeyAndXmlValMap.containsKey("maritalStatusDepict")) {
            rangeName = "婚姻状况代码表";
            s1 = System.currentTimeMillis();

            Map<String, String> maritalMap = hlhtDictService.queryNocodeDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("maritalStatusDepict").toString());
            if (MapUtils.isNotEmpty(maritalMap)) {
                tmplKeyAndXmlValMap.replace("maritalStatusId", maritalMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("maritalStatusDepict", maritalMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("maritalStatusId", "90");
                tmplKeyAndXmlValMap.replace("maritalStatusDepict", "未说明的婚姻状况");
            }

            codeNode = document.selectSingleNode("//maritalStatusCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("maritalStatusId").toString());
            displayNameNode = document.selectSingleNode("//maritalStatusCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("maritalStatusDepict").toString());

            LOG.info("thread {} - 婚姻状况代码表 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //3 ethnicGroupId ethnicGroupDescrive
        if (tmplKeyAndXmlValMap.containsKey("ethnicGroupDescrive")) {
            rangeName = "民族类别代码表";

            s1 = System.currentTimeMillis();

            Map<String, String> ethnicGroupMap = hlhtDictService.queryNocodeDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("ethnicGroupDescrive").toString());
            if (MapUtils.isNotEmpty(ethnicGroupMap)) {
                tmplKeyAndXmlValMap.replace("ethnicGroupId", ethnicGroupMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("ethnicGroupDescrive", ethnicGroupMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("ethnicGroupId", "01");
                tmplKeyAndXmlValMap.replace("ethnicGroupDescrive", "汉族");
            }

            codeNode = document.selectSingleNode("//ethnicGroupCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("ethnicGroupId").toString());
            displayNameNode = document.selectSingleNode("//ethnicGroupCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("ethnicGroupDescrive").toString());

            LOG.info("thread {} - 民族类别代码表 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }
        //4 occupationId occupationDepict
        if (tmplKeyAndXmlValMap.containsKey("occupationDepict")) {
            rangeName = "从业状况(个人身份)代码";

            s1 = System.currentTimeMillis();

            Map<String, String> occupationMap = hlhtDictService.queryNocodeDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("occupationDepict").toString());
            if (MapUtils.isNotEmpty(occupationMap)) {
                tmplKeyAndXmlValMap.replace("occupationId", occupationMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("occupationDepict", occupationMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("occupationId", "90");
                tmplKeyAndXmlValMap.replace("occupationDepict", "其他");
            }

            codeNode = document.selectSingleNode("//occupationCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("occupationId").toString());
            displayNameNode = document.selectSingleNode("//occupationCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("occupationDepict").toString());

            LOG.info("thread {} - 从业状况(个人身份)代码 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }
        //5 medicareTypeId medicareTypeDepict
        if (tmplKeyAndXmlValMap.containsKey("medicareTypeDepict")) {
            rangeName = "医疗保险类别代码表";

            s1 = System.currentTimeMillis();

            List<Map<String, String>> medicareMapList = hlhtDictService.queryNocodeDictForList(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("medicareTypeDepict").toString());

            if (CollectionUtils.isNotEmpty(medicareMapList)) {
                Map<String, String> medicareMap = medicareMapList.get(0);
                if (MapUtils.isNotEmpty(medicareMap)) {
                    tmplKeyAndXmlValMap.replace("medicareTypeId", medicareMap.get("RANGE_VALUE"));
                    tmplKeyAndXmlValMap.replace("medicareTypeDepict", medicareMap.get("RANGE_VALUE_MEAN"));
                }
            } else {
                tmplKeyAndXmlValMap.replace("medicareTypeId", "99");
                tmplKeyAndXmlValMap.replace("medicareTypeDepict", "其他");
            }

            codeNode =
                    document.selectSingleNode("//coverageRecord/beneficiary/beneficiary/code/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("medicareTypeId").toString());
            displayNameNode =
                    document.selectSingleNode("//coverageRecord/beneficiary/beneficiary/code/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("medicareTypeDepict").toString());

            LOG.info("thread {} - 医疗保险类别代码表 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }
        //6 jobCategoryId jobCategoryName
        if (tmplKeyAndXmlValMap.containsKey("jobCategoryName")) {
            rangeName = "专业技术职务代码";

            s1 = System.currentTimeMillis();

            Map<String, String> jobCategoryMap = hlhtDictService.queryStandardDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("jobCategoryId").toString(),
                    tmplKeyAndXmlValMap.get("jobCategoryName").toString());

            if (MapUtils.isNotEmpty(jobCategoryMap)) {
                tmplKeyAndXmlValMap.replace("jobCategoryId", jobCategoryMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("jobCategoryName", jobCategoryMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("jobCategoryId", "90");
                tmplKeyAndXmlValMap.replace("jobCategoryName", "其他");
            }

            codeNode = document.selectSingleNode("//healthCareProvider/code/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("jobCategoryId").toString());
            displayNameNode = document.selectSingleNode("//healthCareProvider/code/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("jobCategoryName").toString());

            LOG.info("thread {} - 专业技术职务代码 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //7 deptId roleName
        if (tmplKeyAndXmlValMap.containsKey("deptTypeName")) {
            rangeName = "科室";

            s1 = System.currentTimeMillis();

            Map<String, String> deptMap = hlhtDictService.queryDeptDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("deptTypeId").toString(),
                    tmplKeyAndXmlValMap.get("deptTypeName").toString());

            if (MapUtils.isNotEmpty(deptMap)) {
                tmplKeyAndXmlValMap.replace("deptTypeId", deptMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("deptTypeName", deptMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("deptTypeId", "A69");
                tmplKeyAndXmlValMap.replace("deptTypeName", "其他业务科室");
            }

            codeNode = document.selectSingleNode("//registrationRequest/subject1/assignedEntity/code/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("deptTypeId").toString());
            displayNameNode = document.selectSingleNode("//registrationRequest/subject1/assignedEntity/code/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("deptTypeName").toString());

            LOG.info("thread {} - 科室 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //8 orderItemTypeCode checkTypeName
        if (tmplKeyAndXmlValMap.containsKey("checkTypeName")) {
            rangeName = "医嘱项目类型代码表";

            s1 = System.currentTimeMillis();

            Map<String, String> orderMap = hlhtDictService.queryStandardDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("orderItemTypeCode").toString(),
                    tmplKeyAndXmlValMap.get("checkTypeName").toString());

            if (MapUtils.isNotEmpty(orderMap)) {
                tmplKeyAndXmlValMap.replace("orderItemTypeCode", orderMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("checkTypeName", orderMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("orderItemTypeCode", "99");
                tmplKeyAndXmlValMap.replace("checkTypeName", "其他医嘱");
            }

            codeNode = document.selectSingleNode("//substanceAdministrationRequest/code/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("orderItemTypeCode").toString());
            displayNameNode = document.selectSingleNode("//substanceAdministrationRequest/code/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("checkTypeName").toString());

            LOG.info("thread {} - 医嘱项目类型代码表 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //9 drugChannel drugChannelDepict
        if (tmplKeyAndXmlValMap.containsKey("drugChannelDepict")) {
            rangeName = "用药途径代码";

            s1 = System.currentTimeMillis();

            //发现hlht_dict视图 用药途径代码 会有重复的数据
            List<Map<String, String>> drugChannelMapList = hlhtDictService.queryStandardDictForList(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("drugChannel").toString(),
                    tmplKeyAndXmlValMap.get("drugChannelDepict").toString());

            if (CollectionUtils.isNotEmpty(drugChannelMapList)) {
                Map<String, String> drugChannelMap = drugChannelMapList.get(0);
                if (MapUtils.isNotEmpty(drugChannelMap)) {
                    tmplKeyAndXmlValMap.replace("drugChannel", drugChannelMap.get("RANGE_VALUE"));
                    tmplKeyAndXmlValMap.replace("drugChannelDepict", drugChannelMap.get("RANGE_VALUE_MEAN"));
                }
            } else {
                tmplKeyAndXmlValMap.replace("drugChannel", "9");
                tmplKeyAndXmlValMap.replace("drugChannelDepict", "其他用药途径");
            }

            codeNode = document.selectSingleNode("//substanceAdministrationRequest/routeCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("drugChannel").toString());
            displayNameNode = document.selectSingleNode("//substanceAdministrationRequest/routeCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("drugChannelDepict").toString());

            LOG.info("thread {} - 用药途径代码 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }

        //10 drugDosageForm drugDosageFormDepict
        if (tmplKeyAndXmlValMap.containsKey("drugDosageFormDepict")) {
            rangeName = "药物剂型代码";

            s1 = System.currentTimeMillis();

            Map<String, String> drugDosageMap = hlhtDictService.queryStandardDict(
                    codeSystem,
                    rangeName,
                    tmplKeyAndXmlValMap.get("drugDosageForm").toString(),
                    tmplKeyAndXmlValMap.get("drugDosageFormDepict").toString());

            if (MapUtils.isNotEmpty(drugDosageMap)) {
                tmplKeyAndXmlValMap.replace("drugDosageForm", drugDosageMap.get("RANGE_VALUE"));
                tmplKeyAndXmlValMap.replace("drugDosageFormDepict", drugDosageMap.get("RANGE_VALUE_MEAN"));
            } else {
                tmplKeyAndXmlValMap.replace("drugDosageForm", "99");
                tmplKeyAndXmlValMap.replace("drugDosageFormDepict", "其他剂型(空心胶囊,绷带,纱布,胶布)");
            }

            codeNode =
                    document.selectSingleNode("//substanceAdministrationRequest/administrationUnitCode/@code");
            codeNode.setText(tmplKeyAndXmlValMap.get("drugDosageForm").toString());
            displayNameNode =
                    document.selectSingleNode("//substanceAdministrationRequest/administrationUnitCode/@displayName");
            displayNameNode.setText(tmplKeyAndXmlValMap.get("drugDosageFormDepict").toString());

            LOG.info("thread {} - 药物剂型代码 总耗时：{} 毫秒",
                    Thread.currentThread().getName(), System.currentTimeMillis() - s1);
        }


        //命名空间还原
        message = document.asXML().replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "");
        StringBuilder stringBuilder = new StringBuilder(message);
        message = String.valueOf(stringBuilder.insert(message.indexOf(">"), namespace));
        if ("S0032".equals(action) || "S0035".equals(action)) {
            message = message.replace("type=", "xsi:type=").replace("nil=", "xsi:nil=");
        }
        messageMap.put("message", message);
        return tmplKeyAndXmlValMap;
    }
}
